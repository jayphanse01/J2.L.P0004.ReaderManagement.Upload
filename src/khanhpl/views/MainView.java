/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package khanhpl.views;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import khanhpl.daos.ReaderDAO;
import khanhpl.dtos.ReaderDTO;
import khanhpl.valids.ReaderValidation;

/**
 *
 * @author jayph
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Creates new form MainView
     */
    boolean checkSorted = false;
    boolean checkAddnewBtn = false;
    boolean checkFindByName = false;
    boolean checkDelete = false;
    boolean chkAddnewOrUpdate = false;
    ArrayList<ReaderDTO> readerData = new ArrayList<>();
    ArrayList<ReaderDTO> foundReaderData = null;
    ArrayList<ReaderDTO> sortedReaderData = null;

    public MainView() {
        initComponents();
        rdMale.setSelected(true);
        calBirthday.getDateEditor().setEnabled(false);
        txtReaderID.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrGender = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        pMainPart = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReader = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cbxSortByName = new javax.swing.JComboBox();
        btnGetAllData = new javax.swing.JButton();
        txtSearchByName = new javax.swing.JTextField();
        btnSearchByName = new javax.swing.JButton();
        pDetailedPart = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtReaderID = new javax.swing.JTextField();
        btnSearchByID = new javax.swing.JButton();
        txtFullName = new javax.swing.JTextField();
        rdMale = new javax.swing.JRadioButton();
        rdFemale = new javax.swing.JRadioButton();
        calBirthday = new com.toedter.calendar.JDateChooser();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaAddress = new javax.swing.JTextArea();
        btnAddnew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("READER MANAGEMENT");

        pMainPart.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main Part:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 153, 153))); // NOI18N

        tblReader.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblReader.getTableHeader().setReorderingAllowed(false);
        tblReader.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReaderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReader);

        jLabel2.setText("Sort by Name:");

        cbxSortByName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ascending", "Descending" }));
        cbxSortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSortByNameActionPerformed(evt);
            }
        });

        btnGetAllData.setText("Get All Data");
        btnGetAllData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllDataActionPerformed(evt);
            }
        });

        btnSearchByName.setText("Search By Name");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pMainPartLayout = new javax.swing.GroupLayout(pMainPart);
        pMainPart.setLayout(pMainPartLayout);
        pMainPartLayout.setHorizontalGroup(
            pMainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
            .addGroup(pMainPartLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(36, 36, 36)
                .addGroup(pMainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearchByName)
                    .addComponent(cbxSortByName, 0, 151, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(pMainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearchByName, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                    .addComponent(btnGetAllData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pMainPartLayout.setVerticalGroup(
            pMainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pMainPartLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pMainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbxSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGetAllData))
                .addGap(18, 18, 18)
                .addGroup(pMainPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByName))
                .addGap(0, 18, Short.MAX_VALUE))
        );

        pDetailedPart.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detailed Part:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 153, 153))); // NOI18N

        jLabel3.setText("Reader ID:");

        jLabel4.setText("Full Name:");

        jLabel5.setText("Gender:");

        jLabel6.setText("BirthDay:");

        jLabel7.setText("Email:");

        jLabel8.setText("Phone:");

        jLabel9.setText("Address:");

        btnSearchByID.setText("Search");
        btnSearchByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByIDActionPerformed(evt);
            }
        });

        btngrGender.add(rdMale);
        rdMale.setText("Male");

        btngrGender.add(rdFemale);
        rdFemale.setText("Female");

        txaAddress.setColumns(20);
        txaAddress.setRows(5);
        jScrollPane2.setViewportView(txaAddress);

        btnAddnew.setText("Add New");
        btnAddnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddnewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pDetailedPartLayout = new javax.swing.GroupLayout(pDetailedPart);
        pDetailedPart.setLayout(pDetailedPartLayout);
        pDetailedPartLayout.setHorizontalGroup(
            pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDetailedPartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pDetailedPartLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtReaderID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchByID, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pDetailedPartLayout.createSequentialGroup()
                        .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFullName)
                            .addComponent(txtEmail)
                            .addComponent(txtPhone)
                            .addGroup(pDetailedPartLayout.createSequentialGroup()
                                .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pDetailedPartLayout.createSequentialGroup()
                                        .addComponent(rdMale)
                                        .addGap(41, 41, 41)
                                        .addComponent(rdFemale))
                                    .addComponent(calBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)))
                    .addGroup(pDetailedPartLayout.createSequentialGroup()
                        .addComponent(btnAddnew)
                        .addGap(83, 83, 83)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        pDetailedPartLayout.setVerticalGroup(
            pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pDetailedPartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pDetailedPartLayout.createSequentialGroup()
                        .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtReaderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchByID))
                        .addGap(22, 22, 22)
                        .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(rdMale)
                            .addComponent(rdFemale))
                        .addGap(26, 26, 26)
                        .addComponent(jLabel6))
                    .addComponent(calBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pDetailedPartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddnew)
                    .addComponent(btnSave)
                    .addComponent(btnDelete))
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(322, 322, 322)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(pMainPart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pDetailedPart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pMainPart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pDetailedPart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetAllDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllDataActionPerformed
        // TODO add your handling code here:
        if (readerData.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Reader data is empty");
        } else {
            txtReaderID.setText("");
            txtFullName.setText("");
            txtEmail.setText("");
            txtPhone.setText("");
            txaAddress.setText("");
            Date date = Calendar.getInstance().getTime();
            calBirthday.setDate(date);
            rdMale.setSelected(true);
            txtSearchByName.setText("");
            checkDelete = false;
            checkFindByName = false;
            chkAddnewOrUpdate = false;
            checkAddnewBtn = false;
            checkSorted = false;
            showReaderTbl(readerData);
        }
    }//GEN-LAST:event_btnGetAllDataActionPerformed

    private void cbxSortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSortByNameActionPerformed
        // TODO add your handling code here:
        String sortBySelected = cbxSortByName.getSelectedItem().toString();
        if (readerData.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nothing to sort");
            return;
        } else {
            sortedReaderData = readerData;
            if (sortBySelected.equalsIgnoreCase("Ascending")) {
                sortByAscending(sortedReaderData);
                txtReaderID.setText("");
                txtFullName.setText("");
                txtEmail.setText("");
                txtPhone.setText("");
                txaAddress.setText("");
                Date date = Calendar.getInstance().getTime();
                calBirthday.setDate(date);
                rdMale.setSelected(true);
                txtSearchByName.setText("");
                checkDelete = false;
                checkFindByName = false;
                chkAddnewOrUpdate = false;
                checkAddnewBtn = false;
                checkSorted = true;

                showReaderTbl(sortedReaderData);
            } else if (sortBySelected.equalsIgnoreCase("Descending")) {
                sortByDescending(sortedReaderData);
                txtReaderID.setText("");
                txtFullName.setText("");
                txtEmail.setText("");
                txtPhone.setText("");
                txaAddress.setText("");
                Date date = Calendar.getInstance().getTime();
                calBirthday.setDate(date);
                rdMale.setSelected(true);
                txtSearchByName.setText("");
                checkDelete = false;
                checkFindByName = false;
                chkAddnewOrUpdate = false;
                checkAddnewBtn = false;
                checkSorted = true;
                showReaderTbl(sortedReaderData);
            }
        }
    }//GEN-LAST:event_cbxSortByNameActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        // TODO add your handling code here:
        String readerID = txtReaderID.getText().trim();
        String fullName = txtFullName.getText().trim();
        boolean gender = false;
        if (rdMale.isSelected()) {
            gender = true;
        }
        Date birthday = calBirthday.getDate();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        String addrStr = txaAddress.getText().trim();
        ReaderDAO dao = new ReaderDAO();
        ReaderValidation readerValid = new ReaderValidation();

        if (!readerValid.checkReaderID(readerID)) {
            JOptionPane.showMessageDialog(null, "Reader ID: is not null, max length is 10, is not contains special characters");
            return;
        }
        if (!readerValid.checkReaderName(fullName)) {
            JOptionPane.showMessageDialog(null, " Reader name: max length is 50");
            return;
        }
        if (!readerValid.checkBirthday(birthday)) {
            JOptionPane.showMessageDialog(null, "Birthday must before today");
            return;
        }

        if (!readerValid.checkEmail(email)) {
            JOptionPane.showMessageDialog(null, "Email: max length is 30, contain only one “@” character, not contain other special character");
            return;
        }
        if (!readerValid.checkPhone(phone)) {
            JOptionPane.showMessageDialog(null, "Phone: max length is 15, contain numeric characters only (0-9)");
            return;
        }

        if (!readerValid.checkAddress(addrStr)) {
            JOptionPane.showMessageDialog(null, "Address must be a number");
            return;
        }

        int addr = Integer.parseInt(addrStr);

        ReaderDTO dto = new ReaderDTO(readerID, fullName, gender, birthday, addr, email, phone);
        if (chkAddnewOrUpdate) {
            if (!checkAddnewBtn) {
                JOptionPane.showMessageDialog(null, "Please check Add New button before save to Add new reader");
                return;
            }
            if (!readerValid.checkDupID(readerID, readerData)) {
                JOptionPane.showMessageDialog(null, "Reader ID has been existed");
                return;
            } else {
                boolean chkSave = dao.createReader(dto);
                if (chkSave) {
                    readerData = dao.getReaderList();
                    showReaderTbl(readerData);
                    txtReaderID.setText("");
                    txtFullName.setText("");
                    txtEmail.setText("");
                    txtPhone.setText("");
                    txaAddress.setText("");
                    Date date = Calendar.getInstance().getTime();
                    calBirthday.setDate(date);
                    rdMale.setSelected(true);
                    txtSearchByName.setText("");
                    txtReaderID.setEditable(false);
                    chkAddnewOrUpdate = false;
                    checkAddnewBtn = false;
                    checkSorted = false;
                    JOptionPane.showMessageDialog(null, "Add successful");
                } else {
                    JOptionPane.showMessageDialog(null, "Add fail");
                }

            }
        } else {
            boolean chkUpdate = dao.updateReader(dto);
            if (chkUpdate) {
                readerData = dao.getReaderList();
                showReaderTbl(readerData);
                txtReaderID.setText("");
                txtFullName.setText("");
                txtEmail.setText("");
                txtPhone.setText("");
                txaAddress.setText("");
                Date date = Calendar.getInstance().getTime();
                calBirthday.setDate(date);
                rdMale.setSelected(true);
                txtSearchByName.setText("");
                txtReaderID.setEditable(false);
                chkAddnewOrUpdate = false;
                checkDelete = false;
                checkFindByName = false;
                checkAddnewBtn = false;
                checkSorted = false;
                JOptionPane.showMessageDialog(null, "Update successful");
            } else {

                JOptionPane.showMessageDialog(null, "Update fail");
            }
        }


    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed
        // TODO add your handling code here:
        String searchName = txtSearchByName.getText().trim();
        if (searchName.equals("")) {
            JOptionPane.showMessageDialog(null, "Please input value to search");
            return;
        } else {
            boolean chkSearchByName = false;
            foundReaderData = new ArrayList<>();
            for (ReaderDTO dto : readerData) {
                if (dto.getReaderName().contains(searchName)) {
                    foundReaderData.add(dto);
                    chkSearchByName = true;
                }
            }
            if (chkSearchByName) {
                JOptionPane.showMessageDialog(null, "Search By Name successful!");
                txtReaderID.setText("");
                txtFullName.setText("");
                txtEmail.setText("");
                txtPhone.setText("");
                txaAddress.setText("");
                Date date = Calendar.getInstance().getTime();
                calBirthday.setDate(date);
                rdMale.setSelected(true);
                checkFindByName = true;
                checkDelete = true;
                chkAddnewOrUpdate = false;
                checkAddnewBtn = false;
                checkSorted = false;
                showReaderTbl(foundReaderData);
            } else {
                JOptionPane.showMessageDialog(null, "No result has been detected");
                checkFindByName = true;
                checkDelete = false;
                chkAddnewOrUpdate = false;
                checkAddnewBtn = false;
                checkSorted = false;
                showReaderTbl(foundReaderData);
            }
        }
    }//GEN-LAST:event_btnSearchByNameActionPerformed

    private void btnAddnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddnewActionPerformed
        // TODO add your handling code here:
        txtReaderID.setEditable(true);
        txtReaderID.setText("");
        txtFullName.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txaAddress.setText("");
        Date date = Calendar.getInstance().getTime();
        calBirthday.setDate(date);
        rdMale.setSelected(true);
        txtSearchByName.setText("");
        chkAddnewOrUpdate = true;
        checkDelete = false;
        checkFindByName = false;
        checkAddnewBtn = true;

    }//GEN-LAST:event_btnAddnewActionPerformed

    private void btnSearchByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByIDActionPerformed
        // TODO add your handling code here:
        String searchID = txtReaderID.getText().trim();
        if (searchID.equals("")) {
            JOptionPane.showMessageDialog(null, "Please input values to search");
            return;
        } else {
            ReaderDAO dao = new ReaderDAO();
            boolean chkSearchByID = dao.searchByID(searchID);
            if (!chkSearchByID) {
                JOptionPane.showMessageDialog(null, "No search Result");
                return;
            } else {
                JOptionPane.showMessageDialog(null, "Search successful");
                for (ReaderDTO dto : readerData) {
                    if (dto.getReaderID().equalsIgnoreCase(searchID)) {
                        txtFullName.setText(dto.getReaderName());
                        if (dto.isGender()) {
                            rdMale.setSelected(true);
                        } else {
                            rdFemale.setSelected(true);
                        }
                        Date date = dto.getBirthday();
                        calBirthday.setDate(date);
                        txtEmail.setText(dto.getEmail());
                        txtPhone.setText(dto.getPhone());
                        txaAddress.setText(Integer.toString(dto.getAddress()));
                        txtReaderID.setEditable(false);
                        checkDelete = true;
                        chkAddnewOrUpdate = false;
                        checkAddnewBtn = false;
                    }
                }
            }
        }


    }//GEN-LAST:event_btnSearchByIDActionPerformed

    private void tblReaderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReaderMouseClicked
        // TODO add your handling code here:

        int pos = tblReader.getSelectedRow();
        if (pos >= 0) {
            if (checkFindByName) {
                ReaderDTO dto = foundReaderData.get(pos);
                txtReaderID.setText(dto.getReaderID());
                txtFullName.setText(dto.getReaderName());
                if (dto.isGender()) {
                    rdMale.setSelected(true);
                } else {
                    rdFemale.setSelected(true);
                }
                Date date = dto.getBirthday();
                calBirthday.setDate(date);
                txtEmail.setText(dto.getEmail());
                txtPhone.setText(dto.getPhone());
                txaAddress.setText(Integer.toString(dto.getAddress()));
            } else if (checkSorted) {
                ReaderDTO dto = sortedReaderData.get(pos);
                txtReaderID.setText(dto.getReaderID());
                txtFullName.setText(dto.getReaderName());
                if (dto.isGender()) {
                    rdMale.setSelected(true);
                } else {
                    rdFemale.setSelected(true);
                }
                Date date = dto.getBirthday();
                calBirthday.setDate(date);
                txtEmail.setText(dto.getEmail());
                txtPhone.setText(dto.getPhone());
                txaAddress.setText(Integer.toString(dto.getAddress()));
            } else {
                ReaderDTO dto = readerData.get(pos);
                txtReaderID.setText(dto.getReaderID());
                txtFullName.setText(dto.getReaderName());
                if (dto.isGender()) {
                    rdMale.setSelected(true);
                } else {
                    rdFemale.setSelected(true);
                }
                Date date = dto.getBirthday();
                calBirthday.setDate(date);
                txtEmail.setText(dto.getEmail());
                txtPhone.setText(dto.getPhone());
                txaAddress.setText(Integer.toString(dto.getAddress()));
            }
        }
        txtReaderID.setEditable(false);
        chkAddnewOrUpdate = false;
        checkDelete = true;
    }//GEN-LAST:event_tblReaderMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (!checkDelete) {
            JOptionPane.showMessageDialog(null, "Please choose a reader to delete");
            return;
        } else {
            ReaderDAO dao = new ReaderDAO();
            String readerID = txtReaderID.getText().trim();
            boolean chkDeleted = dao.deleteReader(readerID);
            if (chkDeleted) {
                JOptionPane.showMessageDialog(null, "Delete successfull");
                txtReaderID.setText("");
                txtFullName.setText("");
                txtEmail.setText("");
                txtPhone.setText("");
                txaAddress.setText("");
                Date date = Calendar.getInstance().getTime();
                calBirthday.setDate(date);
                rdMale.setSelected(true);
                txtSearchByName.setText("");
                chkAddnewOrUpdate = false;
                checkDelete = false;
                checkFindByName = false;
                readerData = dao.getReaderList();
                showReaderTbl(readerData);

            } else {
                JOptionPane.showMessageDialog(null, "Delete fail");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddnew;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGetAllData;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchByID;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.ButtonGroup btngrGender;
    private com.toedter.calendar.JDateChooser calBirthday;
    private javax.swing.JComboBox cbxSortByName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pDetailedPart;
    private javax.swing.JPanel pMainPart;
    private javax.swing.JRadioButton rdFemale;
    private javax.swing.JRadioButton rdMale;
    private javax.swing.JTable tblReader;
    private javax.swing.JTextArea txaAddress;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtReaderID;
    private javax.swing.JTextField txtSearchByName;
    // End of variables declaration//GEN-END:variables

    private void showReaderTbl(ArrayList<ReaderDTO> listData) {
        tblReader.clearSelection();
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Full Name", "Age", "Gender", "Phone", "Address"}, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        };
        if (!listData.isEmpty()) {
            for (ReaderDTO dto : listData) {
                Vector readerRow = new Vector();
                readerRow.add(dto.getReaderID());
                readerRow.add(dto.getReaderName());
                Date birthday = dto.getBirthday();
                int age = getReaderAge(birthday);
                readerRow.add(age);
                if (dto.isGender()) {
                    readerRow.add("Male");
                } else {
                    readerRow.add("Female");
                }
                readerRow.add(dto.getPhone());
                readerRow.add(dto.getAddress());
                model.addRow(readerRow);
            }
            tblReader.setModel(model);
            tblReader.updateUI();
        }

    }

    private int getReaderAge(Date birthday) {
        int age = -1;
        //get birth year
        Calendar cal = new GregorianCalendar();
        cal.setTime(birthday);
        int birthYear = cal.get(Calendar.YEAR);
        //end get birth year
        int curYear = Calendar.getInstance().get(Calendar.YEAR);
        age = curYear - birthYear;
        return age;
    }

    private void sortByAscending(ArrayList<ReaderDTO> sortedReaderData) {
        Collections.sort(sortedReaderData, new Comparator<ReaderDTO>() {
            @Override
            public int compare(ReaderDTO o1, ReaderDTO o2) {
                return o1.getReaderName().compareTo(o2.getReaderName());
            }
        });
    }

    private void sortByDescending(ArrayList<ReaderDTO> sortedReaderData) {
        Collections.sort(sortedReaderData, new Comparator<ReaderDTO>() {
            @Override
            public int compare(ReaderDTO o1, ReaderDTO o2) {
                return o2.getReaderName().compareTo(o1.getReaderName());
            }
        });
    }
}
